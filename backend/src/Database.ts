//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { VtuServicesEntity } from './db/VtuServices.entity';
import { TransactionsEntity } from './db/Transactions.entity';
import { CustomersEntity } from './db/Customers.entity';
import { WalletEntity } from './db/Wallet.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      VtuServicesEntity,
      TransactionsEntity,
      CustomersEntity,
      WalletEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      VtuServices: [
        {
          serviceName: 'serviceName 1',
          cost: 0.49,
          provider: 'provider 1',
          description: 'description 1',
          transactionsMenu: 1,
          wallet: 1,
          id: 100,
        },
        {
          serviceName: 'serviceName 2',
          cost: 0.74,
          provider: 'provider 2',
          description: 'description 2',
          transactionsMenu: 2,
          wallet: 2,
          id: 81,
        },
        {
          serviceName: 'serviceName 3',
          cost: 0.01,
          provider: 'provider 3',
          description: 'description 3',
          transactionsMenu: 3,
          wallet: 3,
          id: 37,
        },
        {
          serviceName: 'serviceName 4',
          cost: 0.33,
          provider: 'provider 4',
          description: 'description 4',
          transactionsMenu: 4,
          wallet: 4,
          id: 50,
        },
        {
          serviceName: 'serviceName 5',
          cost: 0.5,
          provider: 'provider 5',
          description: 'description 5',
          transactionsMenu: 5,
          wallet: 5,
          id: 7,
        },
      ],
      Transactions: [
        {
          transactionID: 'transactionID 1',
          customerID: 1,
          serviceID: 1,
          amount: 0.65,
          date: '2025-01-08T23:58:22.343Z',
          status: 'status 1',
          id: 94,
        },
        {
          transactionID: 'transactionID 2',
          customerID: 2,
          serviceID: 2,
          amount: 0.1,
          date: '2023-05-25T08:32:54.142Z',
          status: 'status 2',
          id: 91,
        },
        {
          transactionID: 'transactionID 3',
          customerID: 3,
          serviceID: 3,
          amount: 0.44,
          date: '2023-05-16T04:44:07.935Z',
          status: 'status 3',
          id: 81,
        },
        {
          transactionID: 'transactionID 4',
          customerID: 4,
          serviceID: 4,
          amount: 0.58,
          date: '2024-06-13T18:32:49.910Z',
          status: 'status 4',
          id: 2,
        },
        {
          transactionID: 'transactionID 5',
          customerID: 5,
          serviceID: 5,
          amount: 0.16,
          date: '2024-09-27T14:20:13.580Z',
          status: 'status 5',
          id: 59,
        },
      ],
      Customers: [
        {
          customerName: 'customerName 1',
          phoneNumber: 'phoneNumber 1',
          customerWallet: 1,
          id: 98,
        },
        {
          customerName: 'customerName 2',
          phoneNumber: 'phoneNumber 2',
          customerWallet: 2,
          id: 49,
        },
        {
          customerName: 'customerName 3',
          phoneNumber: 'phoneNumber 3',
          customerWallet: 3,
          id: 15,
        },
        {
          customerName: 'customerName 4',
          phoneNumber: 'phoneNumber 4',
          customerWallet: 4,
          id: 57,
        },
        {
          customerName: 'customerName 5',
          phoneNumber: 'phoneNumber 5',
          customerWallet: 5,
          id: 23,
        },
      ],
      Wallet: [
        {
          walletID: 'walletID 1',
          customerID: 1,
          balance: 0.79,
          transactionHistory: 1,
          id: 68,
        },
        {
          walletID: 'walletID 2',
          customerID: 2,
          balance: 0.27,
          transactionHistory: 2,
          id: 61,
        },
        {
          walletID: 'walletID 3',
          customerID: 3,
          balance: 0.97,
          transactionHistory: 3,
          id: 82,
        },
        {
          walletID: 'walletID 4',
          customerID: 4,
          balance: 0.56,
          transactionHistory: 4,
          id: 40,
        },
        {
          walletID: 'walletID 5',
          customerID: 5,
          balance: 0.54,
          transactionHistory: 5,
          id: 76,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('VtuServicesEntity', data.VtuServices);
      await this.SeedResource('TransactionsEntity', data.Transactions);
      await this.SeedResource('CustomersEntity', data.Customers);
      await this.SeedResource('WalletEntity', data.Wallet);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
